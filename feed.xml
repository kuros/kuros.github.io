<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://kuros.in/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kuros.in/" rel="alternate" type="text/html" /><updated>2021-08-29T14:42:00+00:00</updated><id>https://kuros.in/feed.xml</id><title type="html">Kuros.in</title><subtitle>This is the place where I collect and share all the knowledge I have learned and gained over the period of time. This blog is mainily focused on capturing the technical learning. </subtitle><author><name>Kumar Rohit</name></author><entry><title type="html">Authentication in NestJS using firebase token</title><link href="https://kuros.in/typescript/nestjs-firebase-token-authentication/" rel="alternate" type="text/html" title="Authentication in NestJS using firebase token" /><published>2021-08-29T00:00:00+00:00</published><updated>2021-08-29T00:00:00+00:00</updated><id>https://kuros.in/typescript/nestjs-firebase-token-authentication</id><content type="html" xml:base="https://kuros.in/typescript/nestjs-firebase-token-authentication/">&lt;p&gt;You have build your nest microservice, but you want to secure your application using firebase tokens.&lt;/p&gt;

&lt;p&gt;In earlier post, we had &lt;a href=&quot;/typescript/nestjs-getting-started/&quot;&gt;set up a nestJs application&lt;/a&gt; with simple controller. 
Now we will set up authentication using firebase auth tokens.&lt;/p&gt;

&lt;h1 id=&quot;initialize-firebase&quot;&gt;Initialize firebase&lt;/h1&gt;
&lt;p&gt;The first step is to initialize firebase app.&lt;/p&gt;

&lt;h2 id=&quot;service-account&quot;&gt;Service account&lt;/h2&gt;
&lt;p&gt;Login to your firebase account, create/open the project and goto project settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/firebase-auth-link.webp&quot; alt=&quot;&quot; title=&quot;Firebase auth link&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to service account&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/firebase-service-account.webp&quot; alt=&quot;&quot; title=&quot;Firebase service account&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And generate key, download this file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/firebase-generate-key.webp&quot; alt=&quot;&quot; title=&quot;Firebase generate key&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keep this file secure. We will now set up our config.&lt;/p&gt;

&lt;h2 id=&quot;config&quot;&gt;config&lt;/h2&gt;

&lt;p&gt;we will create a file &lt;strong&gt;firebase-config.ts&lt;/strong&gt;, and populate the values from generated keys
(for better security, you should pass the values using environment values).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/7e645a79b42a261efd17417f0e55bc34.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;creating-firebaseapp-service&quot;&gt;Creating FirebaseApp service&lt;/h2&gt;
&lt;p&gt;For that lets create a service which will provide us with the instance of firebase auth object.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/1c0b425f0016cde0e60fe7adda69d309.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we will add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FirebaseApp&lt;/code&gt; as a provider into our app.module.ts&lt;/p&gt;

&lt;h1 id=&quot;nestjs-middleware&quot;&gt;NestJs Middleware&lt;/h1&gt;
&lt;p&gt;So middleware are functions which are called before route handlers. Middleware functions has access to http request, response and next function which points to next middleware.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/nest-middleware.webp&quot; alt=&quot;&quot; title=&quot;Firebase generate key&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Middleware functions can perform the following tasks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;execute any code.&lt;/li&gt;
  &lt;li&gt;make changes to the request and the response objects.&lt;/li&gt;
  &lt;li&gt;end the request-response cycle.&lt;/li&gt;
  &lt;li&gt;call the next middleware function in the stack.&lt;/li&gt;
  &lt;li&gt;if the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details refer &lt;a href=&quot;https://docs.nestjs.com/middleware&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pre-auth-middleware&quot;&gt;Pre-auth middleware&lt;/h2&gt;
&lt;p&gt;Let’s create our middleware which will validate if the request has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bearer&lt;/code&gt; token and verify it.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/9ded11c1e6d7ef93dd11f1e114f2ed30.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In order to create a middleware we need to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NestMiddleware&lt;/code&gt; and implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; method. As said earlier, we get handle of request, response and next methods.&lt;/p&gt;

&lt;p&gt;In here, we are initializing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt; in constructor, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; method we evaluate the token and pass it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firebaseAuth.verfiyIdToken()&lt;/code&gt;
to verify against firebase.&lt;/p&gt;

&lt;p&gt;Once validated make sure to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next()&lt;/code&gt; on success, else your request won’t proceed to next middleware, and it will hang.
Here, I am adding user information to request object which I extracted from the token.&lt;/p&gt;

&lt;p&gt;In case we don’t find the token or token verification fails we are writing an error response to response object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Here I am using firebase token, but you can setup any authentication mechanism.&lt;/p&gt;
&lt;h2 id=&quot;add-middleware-to-the-nestjs-app&quot;&gt;Add middleware to the nestJS app&lt;/h2&gt;

&lt;p&gt;Next we will plugin our middle to app. Open your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt;, make sure it implements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NestModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the configure method we will apply our middleware and also specify which path/methods you want to apply this middleware.
Here, I am saying I want to have authentication on all the urls which starts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/secure&lt;/code&gt; 
&lt;script src=&quot;https://gist.github.com/kuros/dc87948f2449e69c0c4d8af58bdc4ef9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And, you authentication configuration is complete.&lt;/p&gt;

&lt;h1 id=&quot;test-controller&quot;&gt;Test Controller&lt;/h1&gt;
&lt;p&gt;In our app controller, let’s add get methods and test if our middleware is working fine.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/c900b1df724a2758e2a4668d3549684b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now try to access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000/ping&lt;/code&gt;, you should be able to pong response.
But when you will try to access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000/secure/ping&lt;/code&gt; you will get an error response&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2021-08-29T14:28:31.324Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/secure/ping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;access denied&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you need firebase token to access the apis.&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="typescript" /><summary type="html">You have build your nest microservice, but you want to secure your application using firebase tokens.</summary></entry><entry><title type="html">NestJs</title><link href="https://kuros.in/typescript/nestjs-getting-started/" rel="alternate" type="text/html" title="NestJs" /><published>2021-08-16T00:00:00+00:00</published><updated>2021-08-16T00:00:00+00:00</updated><id>https://kuros.in/typescript/nestjs-getting-started</id><content type="html" xml:base="https://kuros.in/typescript/nestjs-getting-started/">&lt;p&gt;Coming from the Java background, I was always troubled when using javascript. To my rescue came the typescript, it was easy to co-relate and write structured code.
At the same time, I had to write a lot of boilerplate code to follow SOLID principles.&lt;/p&gt;

&lt;p&gt;I started to look for js framework which would simplify these things.
After going through a lot of alternatives, I landed to NestJS.&lt;/p&gt;

&lt;h1 id=&quot;what-is-nestjs&quot;&gt;What is NestJs?&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NestJs&lt;/code&gt; is a nodeJs frameworks to build scalable and efficient microservices.&lt;/p&gt;

&lt;p&gt;NestJs draws a lot of inspiration from Angular framework, it focuses on writing modular codes. 
I would say, similar to Angular, it is highly opinionated on how to organize and structure your code.&lt;/p&gt;

&lt;p&gt;It leverages typescript to have statically typed code compilation (though you can write your code javascript as well).
NextJS is basically a framework over express, so what the need of having a framework over framework, well, express is good, but it is quite verbose and does not solve the problem of - &lt;strong&gt;Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NestJs focus on clean code practices, it enables you to create fast, writing highly testable, scalable &amp;amp; loosely coupled system, which in longer run are easy to maintain.&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;
&lt;p&gt;NestJs provides &lt;a href=&quot;https://docs.nestjs.com/cli/overview&quot;&gt;CLI&lt;/a&gt; which can be used to generate scaffolding the project or generate modules. services, resources etc.&lt;/p&gt;

&lt;p&gt;You simply need node to get started. Just type the below command to install the CLI, then use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nest&lt;/code&gt; command to create new project&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @nestjs/cli
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nest new project-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now go your project and start the project and get started.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;project-name
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can access the services at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000/&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;nestjs-module-controller-and-service&quot;&gt;NestJS Module, controller and service&lt;/h1&gt;

&lt;p&gt;Before we proceed, look at the files generated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/nest-structure.webp&quot; alt=&quot;&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It creates all the support files &amp;amp; src folder which contains your app.&lt;/p&gt;

&lt;p&gt;NestJs doesn’t read all the files, it just looks at files supplied in module/services.
The starting for point for any NestJs application in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@nestjs/core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.module&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
  
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
 &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NestFactory&lt;/code&gt; to create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt; which initializes the application.&lt;/p&gt;

&lt;p&gt;Let’s take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt;. It’s a simple typescript class  with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Module&lt;/code&gt; class decorator, it defines which modules are imported, defines the controllers (responsible for rest calls) &amp;amp; providers (define services).&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  
 &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;  
 &lt;span class=&quot;na&quot;&gt;controllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  
 &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nest cli also generates a sample a controller &amp;amp; service. Nest has abstracted routing/http calls via decorators, so creating new endpoints is super easy. All you need to do is to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Controller(&amp;lt;PATH&amp;gt;)&lt;/code&gt; on the class and then use Nest decorator for HTTP requests eg. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Get(), @Post(), @Put() @Delete()&lt;/code&gt; etc on your method.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@nestjs/common&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./app.service&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
  
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  
  
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you see here, we are passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppService&lt;/code&gt; in constructor. When the application initializes Nest injects the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppService&lt;/code&gt; into this controller. The only thing we need to make sure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppService&lt;/code&gt; class is marked with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Injectable()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Injectable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@nestjs/common&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
  
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello World!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To sum up, here are some of the pros &amp;amp; cons of using NestJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Highly structured&lt;/li&gt;
  &lt;li&gt;Testable&lt;/li&gt;
  &lt;li&gt;Dependency Injection&lt;/li&gt;
  &lt;li&gt;Modular&lt;/li&gt;
  &lt;li&gt;You can switch between express &amp;amp; fastify without affecting your controllers&lt;/li&gt;
  &lt;li&gt;Very less boilerplate code&lt;/li&gt;
  &lt;li&gt;High maintainability&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Highly opinionated on how the code should be structured.&lt;/li&gt;
  &lt;li&gt;Learning curve&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I found it really easy to get started, hope you also find it interesting.&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="typescript" /><summary type="html">Coming from the Java background, I was always troubled when using javascript. To my rescue came the typescript, it was easy to co-relate and write structured code. At the same time, I had to write a lot of boilerplate code to follow SOLID principles.</summary></entry><entry><title type="html">Publish artifacts to gcp using github actions.</title><link href="https://kuros.in/gcp/publish-artifacts-to-gcp-using-github-actions/" rel="alternate" type="text/html" title="Publish artifacts to gcp using github actions." /><published>2021-07-20T00:00:00+00:00</published><updated>2021-07-20T00:00:00+00:00</updated><id>https://kuros.in/gcp/publish-artifacts-to-gcp-using-github-actions</id><content type="html" xml:base="https://kuros.in/gcp/publish-artifacts-to-gcp-using-github-actions/">&lt;p&gt;Github gives a generous limits for your private projects, its to good for your private repos or even small startups.
However, Github package has a constraint of 500mb size, which is quite low.&lt;/p&gt;

&lt;p&gt;Lets compare the pricing for both github &amp;amp; gcp (as of July 2021)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Storage (per GB)&lt;/th&gt;
      &lt;th&gt;Data Transfer (per GB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Github&lt;/td&gt;
      &lt;td&gt;$0.25&lt;/td&gt;
      &lt;td&gt;$0.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GCP artifactory&lt;/td&gt;
      &lt;td&gt;$0.10&lt;/td&gt;
      &lt;td&gt;$0.01 - $0.15&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Looking at pricing, storing artifacts in GCP is a good idea.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-service-account&quot;&gt;Setting up service account&lt;/h1&gt;

&lt;p&gt;The first thing, we need to set up our service account, so that github has required permission to publish the packages.&lt;/p&gt;

&lt;p&gt;Login to &lt;a href=&quot;https://console.cloud.google.com&quot;&gt;google console&lt;/a&gt; and navigate to `IAM&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/gcp-iam.webp&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You need to add following permission for publishing artifacts (optionally you can provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cloud Run Service Agent&lt;/code&gt; for
cloud run deployments)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/gcp-artifactory-sa.webp&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then generate &amp;amp; download key in json format&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/gcp-generate-key.webp&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- horizontal - responsive --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-4166026699724584&quot; data-ad-slot=&quot;7276848543&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&quot;setup-tokens&quot;&gt;Setup Tokens&lt;/h1&gt;

&lt;p&gt;The first step is to set up a personal access token.&lt;/p&gt;

&lt;p&gt;Go to your profile and click to settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/github_profile.png&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to developer section&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/github-developer.webp&quot; alt=&quot;&quot; width=&quot;60%&quot; float=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a new token &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GCP_ARTIFACTORY_SERVICE_ACCOUNT&lt;/code&gt; with the contents for download service account key. Also add another
token &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GCP_PROJECT_ID&lt;/code&gt; with your GCP project id.&lt;/p&gt;

&lt;h1 id=&quot;github-action&quot;&gt;Github Action&lt;/h1&gt;

&lt;p&gt;Time to setup a github action to push artifacts to repository. You will need to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/ci.yaml&lt;/code&gt;
&lt;script src=&quot;https://gist.github.com/kuros/9ab5508b6883cc9bc70abb31a88e852b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- horizontal - responsive --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-4166026699724584&quot; data-ad-slot=&quot;7276848543&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;There are 5 steps here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Checkout the project&lt;/li&gt;
  &lt;li&gt;Next we are setting up GCP credentials&lt;/li&gt;
  &lt;li&gt;Although not required, but in step 3, we are caching the .m2 folder to speed up the builds&lt;/li&gt;
  &lt;li&gt;We are setting up Java 11&lt;/li&gt;
  &lt;li&gt;Finally, we are deploying our package to the artifactory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DaltReleaseDeploymentRepository&lt;/code&gt; argument of maven to point to our artifactory.&lt;/p&gt;

&lt;h1 id=&quot;using-dependencies-from-gcp-artifactory&quot;&gt;Using dependencies from gcp artifactory&lt;/h1&gt;

&lt;p&gt;In order to use the artifacts, you need to specify the repository in your pom file&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;artifact-registry&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;artifactregistry://&lt;span class=&quot;nt&quot;&gt;&amp;lt;YOUR-ARTIFACTORY-REPO&amp;gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/releases&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- horizontal - responsive --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-4166026699724584&quot; data-ad-slot=&quot;7276848543&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We will also need to add wagon extension for GCP in your pom file:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.cloud.artifactregistry&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;artifactregistry-maven-wagon&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;using-parent-from-your-artifactory&quot;&gt;Using parent from your artifactory&lt;/h1&gt;

&lt;p&gt;Finally, if want to extend from parent POM from your artifactory. You will have create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mvn/extensions.xml&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/fbe8c2a750fdbc16b7eee6434cbf598e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This is required because the extensions are not build to load parent pom, so it has to be run in the pre-build step.&lt;/p&gt;

&lt;p&gt;And, there you have it, publish &amp;amp; use artifacts from GCP&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="gcp" /><category term="ci/cd" /><category term="github-actions" /><summary type="html">Github gives a generous limits for your private projects, its to good for your private repos or even small startups. However, Github package has a constraint of 500mb size, which is quite low.</summary></entry><entry><title type="html">Fixing Sass invalid ascii character errors</title><link href="https://kuros.in/ci/cd/sass-invalid-ascii-character/" rel="alternate" type="text/html" title="Fixing Sass invalid ascii character errors" /><published>2021-07-19T00:00:00+00:00</published><updated>2021-07-19T00:00:00+00:00</updated><id>https://kuros.in/ci/cd/sass-invalid-ascii-character</id><content type="html" xml:base="https://kuros.in/ci/cd/sass-invalid-ascii-character/">&lt;p&gt;I was working with my jekyll site, and I started getting the below error.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Jekyll Feed: Generating feed &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;posts
GitHub Metadata: No GitHub API authentication could be found. Some fields may be missing or have incorrect data.
Conversion error: Jekyll::Converters::Scss encountered an error &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;converting &lt;span class=&quot;s1&quot;&gt;'assets/css/main.scss'&lt;/span&gt;:
					Invalid US-ASCII character &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;E2&quot;&lt;/span&gt; on line 54
jekyll 3.9.0 | Error:  Invalid US-ASCII character &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;E2&quot;&lt;/span&gt; on line 54
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spend a lot of time flustered and googling round, I did try to run in debug more, identifying each error and trying to fix it.
But it was mundane. So after, lots of googling, here is what I found out which worked for me.&lt;/p&gt;

&lt;h2 id=&quot;the-fix&quot;&gt;The Fix&lt;/h2&gt;
&lt;p&gt;In order to fix this, you add below variable in your .bashrc/.zshrc file (in your home folder).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LANG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you have exported the language, the issue got resolved.&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="CI/CD" /><summary type="html">I was working with my jekyll site, and I started getting the below error.</summary></entry><entry><title type="html">Download file from private github repository using curl.</title><link href="https://kuros.in/ci/cd/download-file-from-private-github-repo-using-curl/" rel="alternate" type="text/html" title="Download file from private github repository using curl." /><published>2021-07-18T00:00:00+00:00</published><updated>2021-07-18T00:00:00+00:00</updated><id>https://kuros.in/ci/cd/download-file-from-private-github-repo-using-curl</id><content type="html" xml:base="https://kuros.in/ci/cd/download-file-from-private-github-repo-using-curl/">&lt;p&gt;Most of the time, when we are working with automating builds, we often lands up in downloading some files and using it in our workflows.
So here are the steps how to curl a file from private github repo repo.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-the-token&quot;&gt;Setting up the token&lt;/h1&gt;
&lt;p&gt;The first step is to set up a &lt;a href=&quot;/ci/cd/use-private-repo-to-publish-website-with-github-pages/#setting-up-personal-token&quot; target=&quot;_blank&quot;&gt;personal access token&lt;/a&gt;,&lt;/p&gt;

&lt;h1 id=&quot;curl-the-file&quot;&gt;Curl the file&lt;/h1&gt;
&lt;p&gt;Now we make a simple curl with header to download file.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/cde70d06305d627c300cd95fb39b521e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s it. It’s a short article but quite useful.&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="CI/CD" /><summary type="html">Most of the time, when we are working with automating builds, we often lands up in downloading some files and using it in our workflows. So here are the steps how to curl a file from private github repo repo.</summary></entry><entry><title type="html">Use private repo to publish websites with github pages.</title><link href="https://kuros.in/ci/cd/use-private-repo-to-publish-website-with-github-pages/" rel="alternate" type="text/html" title="Use private repo to publish websites with github pages." /><published>2021-06-25T00:00:00+00:00</published><updated>2021-06-25T00:00:00+00:00</updated><id>https://kuros.in/ci/cd/use-private-repo-to-publish-website-with-github-pages</id><content type="html" xml:base="https://kuros.in/ci/cd/use-private-repo-to-publish-website-with-github-pages/">&lt;p&gt;Github pages are great, it provides a free static page hosting, 
but the only caveat is the repository has to be public repository.
And, if you want to keep your source private,
you will have to opt for premium plans to host pages from private repository.&lt;/p&gt;

&lt;p&gt;Here is what I have done, github allows unlimited private repositories, 
so I created a new private repo where I kept my source code and another repo where my site is hosted.&lt;/p&gt;

&lt;h2 id=&quot;my-website&quot;&gt;My website&lt;/h2&gt;
&lt;p&gt;I am also hosting this website on github. 
I am using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; as my website generator, but you can use any static web generator e.g. &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next&lt;/a&gt;, &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;.
I am assuming you have your static web already in place.&lt;/p&gt;

&lt;p&gt;In this article, we will automate the process of deployment, we will build the website in private repo and then publish it to the public repo from where it will be served.
I will be going through Jekyll site action.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-personal-token&quot;&gt;Setting up personal token&lt;/h2&gt;
&lt;p&gt;The first step is to set up a personal access token.&lt;/p&gt;

&lt;p&gt;Go to your profile and click to settings. &lt;img src=&quot;/images/2021/github_profile.png&quot; alt=&quot;&quot; width=&quot;20%&quot; float=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/github-developer.webp&quot; alt=&quot;&quot; width=&quot;60%&quot; float=&quot;right&quot; /&gt; Go to developer.&lt;/p&gt;

&lt;p&gt;Go to Personal access token. &lt;img src=&quot;/images/2021/github-personal-token.webp&quot; alt=&quot;&quot; width=&quot;50%&quot; float=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- horizontal - responsive --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-4166026699724584&quot; data-ad-slot=&quot;7276848543&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now you need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Generate new token&lt;/code&gt;. with repo permissions.
&lt;img src=&quot;/images/2021/github-token.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you are done copy the generated token, we will need to set this token during our build.&lt;/p&gt;

&lt;h2 id=&quot;create-secret-in-private-repo&quot;&gt;Create secret in private repo&lt;/h2&gt;

&lt;p&gt;Go to your private repo and click the settings:
&lt;img src=&quot;/images/2021/github-repo-setting.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to secrets and create a new secret with token we have earlier generated, I have named it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MY_TOKEN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2021/github-new-secret.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- horizontal - responsive --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-4166026699724584&quot; data-ad-slot=&quot;7276848543&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-github-action-in-private-repo&quot;&gt;Create github action in private repo&lt;/h2&gt;
&lt;p&gt;This is where the magic begins, we will build a github action in our private repo. You will need to create a file at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/ci.yml&lt;/code&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/09a7e5254c617ac317785b4a45a3faa6.js&quot;&gt;&lt;/script&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- horizontal - responsive --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-4166026699724584&quot; data-ad-slot=&quot;7276848543&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;we checkout the source code (line 15), notice we are providing path as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; so our code will be checked out at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./code/&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;we checkout the site repository (line 19), here we are checking out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;PUBLIC_REPO&amp;gt;&lt;/code&gt; (in my case it was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kuros/kuros.github.io&lt;/code&gt;) in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; directory, make sure you set the token here.&lt;/li&gt;
  &lt;li&gt;I am performing a Jekyll build (line 26), if you are using other site builders, this step will change.&lt;/li&gt;
  &lt;li&gt;Time to clean my old website files, so I go to site folder and delete everything (line 33).&lt;/li&gt;
  &lt;li&gt;Copy the generated build to my site folder(line 37).&lt;/li&gt;
  &lt;li&gt;Finally, commit the changes to publish your site(line 42).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So here you have it, when ever you push changes to your private repository. The github action will be fired which will build and publish your site to your public repo without exposing your source code.&lt;/p&gt;

&lt;p&gt;I would love to know what you think.&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="CI/CD" /><summary type="html">Github pages are great, it provides a free static page hosting, but the only caveat is the repository has to be public repository. And, if you want to keep your source private, you will have to opt for premium plans to host pages from private repository.</summary></entry><entry><title type="html">Sequential build numbers of artifacts in gcp cloud build</title><link href="https://kuros.in/gcp/ci/cd/sequential-build-number-of-artifacts-in-gcp-cloud-build/" rel="alternate" type="text/html" title="Sequential build numbers of artifacts in gcp cloud build" /><published>2021-05-31T00:00:00+00:00</published><updated>2021-05-31T00:00:00+00:00</updated><id>https://kuros.in/gcp/ci/cd/sequential-build-number-of-artifacts-in-gcp-cloud-build</id><content type="html" xml:base="https://kuros.in/gcp/ci/cd/sequential-build-number-of-artifacts-in-gcp-cloud-build/">&lt;p&gt;Cloud build is managed service in Google Cloud Platform Infrastructure to offer CI/CD feature. 
As it is quite known, these days CI/CD has become the backbone on DevOps. 
Having a streamlined process ensures fast flow to production. 
When building pipeline you want to &lt;strong&gt;build&lt;/strong&gt;, &lt;strong&gt;test&lt;/strong&gt;, &lt;strong&gt;deploy&lt;/strong&gt; your artifact to staging/production environments automatically whenever changes are pushed to your code base.&lt;/p&gt;

&lt;h1 id=&quot;cloud-build&quot;&gt;Cloud Build&lt;/h1&gt;
&lt;p&gt;Cloud build is CI/CD platform offered by GCP. 
The best thing it provides a generous 120 min/day of free build time(At the time of writing this article). 
It’s more than enough for small team to get started. It also provides seamless integration with other GCP products.&lt;/p&gt;

&lt;h1 id=&quot;the-missing-feature---sequential-build-numbers&quot;&gt;The missing feature - Sequential build numbers&lt;/h1&gt;
&lt;p&gt;However, it does have few restrictions, and one such missing feature is having sequential build numbers, cloud build manages the build numbers using SHA string. As Developers we are accustomed to working with incremental build numbers, they are lot easy to manage as compared hash string. But we can achieve it by storing the build numbers in external location, i.e. Cloud Storage.
So lets us build a mechanism to&lt;/p&gt;

&lt;h1 id=&quot;generating-cloud-builder-to-incrementing-build-numbers&quot;&gt;Generating cloud builder to incrementing build numbers&lt;/h1&gt;
&lt;p&gt;In order to achieve the goal, first we need to create a cloud builder.
For this I am creating a cloud builder, let me call it as cloud-build-number. 
Then we will push this to our image repository, next step will be to use this builder to generate builds with sequential numbers.&lt;/p&gt;

&lt;h1 id=&quot;build-number-cloud-builder&quot;&gt;Build number cloud builder&lt;/h1&gt;
&lt;p&gt;In order to create this builder we need entrypoint script, and a Docker file to build our docker container.&lt;/p&gt;

&lt;h2 id=&quot;entry-point-script&quot;&gt;Entry point script&lt;/h2&gt;
&lt;p&gt;So my first file is the script which will be responsible for updating the build numbers. 
I found one &lt;a href=&quot;https://github.com/pixiteapps/android-cloud-build/blob/master/buildnum/increment_buildnumber&quot;&gt;script&lt;/a&gt;, so I took an inspiration and modified it as per my need.&lt;/p&gt;

&lt;p&gt;The idea is, we are going to have a cloud storage folder where we will be keeping all the records for our build, 
each record will store the build number.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/c52ba9a1d91fa68c62dedb64f99d2d51.js&quot;&gt;&lt;/script&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- horizontal - responsive --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-4166026699724584&quot; data-ad-slot=&quot;7276848543&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This script takes name of the file (required argument). 
I wanted the generated versions to in the format of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR:MINOR:PATCH&lt;/code&gt;, so I added additional optional parameters.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-ma&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--major&lt;/code&gt;: To use the major version.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mi&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--minor&lt;/code&gt;: To use specific version.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--env-file&lt;/code&gt;: Name of the output file (default filename: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.buildenv&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; number is stored and incremented in cloud storage.&lt;/p&gt;

&lt;h2 id=&quot;the-docker-file&quot;&gt;The docker file&lt;/h2&gt;
&lt;p&gt;The docker file is simple, we take the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcr.io/cloud-builders/gsutil&lt;/code&gt; and add an entrypoint to our script.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/66507857371c5f1e670ea4ed8ff31781.js&quot;&gt;&lt;/script&gt;

&lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;

&lt;!-- horizontal - responsive --&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-4166026699724584&quot; data-ad-slot=&quot;7276848543&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;build--push-docker-image&quot;&gt;Build &amp;amp; push docker image&lt;/h2&gt;

&lt;p&gt;We need to build the docker image locally, tag it with the path to the gcr.io registry in the project &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-project&lt;/code&gt;, and then push the image. 
I am assuming you have setup gcp login and have write access to cloud registry. For more details refer &lt;a href=&quot;https://cloud.google.com/container-registry/docs/pushing-and-pulling&quot;&gt;gcp docs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; gcr.io/my-project/increment_build_number &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
docker push gcr.io/my-project/increment_build_number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that we have our builder pushed to registry, time to move on to generating build numbers.&lt;/p&gt;

&lt;h1 id=&quot;create-storage-bucket&quot;&gt;Create storage bucket&lt;/h1&gt;
&lt;p&gt;Before we proceed, we need to create a storage bucket on Cloud Storage.&lt;/p&gt;

&lt;p&gt;To create a new storage bucket (e.g. build_numbers), use the gsutil command&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsutil mb &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; PROECT_ID &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; on gs://BUCKET_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more details, refer &lt;a href=&quot;https://cloud.google.com/storage/docs/creating-buckets&quot;&gt;cloud storage docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;generating-build-numbers&quot;&gt;Generating build numbers&lt;/h1&gt;
&lt;p&gt;Finally, it’s time to use builder in our service cloud build, build file: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudbuild.yaml&lt;/code&gt; looks like.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/e11145e82060a2bec764b86fcab60314.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The first step generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.buildenv&lt;/code&gt; file. 
In the build step we use source command to export the build number to environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$build_num&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So this would create a docker image with tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latest&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please do leave comment on what you think.&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="GCP" /><category term="CI/CD" /><summary type="html">Cloud build is managed service in Google Cloud Platform Infrastructure to offer CI/CD feature. As it is quite known, these days CI/CD has become the backbone on DevOps. Having a streamlined process ensures fast flow to production. When building pipeline you want to build, test, deploy your artifact to staging/production environments automatically whenever changes are pushed to your code base.</summary></entry><entry><title type="html">How to handle NullPointerException in Collectors.toMap when a mapped value is null</title><link href="https://kuros.in/java/streams/handle-nullpointerexception-in-collectors-tomap/" rel="alternate" type="text/html" title="How to handle NullPointerException in Collectors.toMap when a mapped value is null" /><published>2020-10-29T00:00:00+00:00</published><updated>2020-10-29T00:00:00+00:00</updated><id>https://kuros.in/java/streams/handle-nullpointerexception-in-collectors-tomap</id><content type="html" xml:base="https://kuros.in/java/streams/handle-nullpointerexception-in-collectors-tomap/">&lt;p&gt;In Java 8, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collectors.toMap&lt;/code&gt; throws &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; when one of the mapped value is null. This is a known &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8148463&quot;&gt;bug&lt;/a&gt; in OpenJDK. There are many workaround to handle this.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The problem statement is simple, I have a list of Employee, given that employee’s salary can be null, I want to map of salary by employeeId.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/0535091c6d7c7d680ff4c11980adab8c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;When we run this code, we get a null pointer exception.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/74b9e356a510c64fb7ac61d35fadf397.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;solution---using-custom-collector&quot;&gt;Solution - Using Custom Collector&lt;/h2&gt;

&lt;p&gt;We are going to create a custom collector, if you have no idea how to create one, follow this &lt;a href=&quot;/java/streams/2019/05/custom-collector/&quot;&gt;post&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/d89c6ded98bfefb1499868ef76aab730.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So here is our modified code, we have just replaced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collectors&lt;/code&gt; implementation with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomCollector&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/d5156e245af77ce9807ff50e46c50d8e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We have fixed the issue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collectors.toMap&lt;/code&gt; with our custom implementation.&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="java" /><category term="streams" /><summary type="html">In Java 8, Collectors.toMap throws NullPointerException when one of the mapped value is null. This is a known bug in OpenJDK. There are many workaround to handle this.</summary></entry><entry><title type="html">How I reduced the build execution time for email connectors using mock email servers.</title><link href="https://kuros.in/testing/testing-email-using-mock-email-server/" rel="alternate" type="text/html" title="How I reduced the build execution time for email connectors using mock email servers." /><published>2020-10-18T00:00:00+00:00</published><updated>2020-10-18T00:00:00+00:00</updated><id>https://kuros.in/testing/testing-email-using-mock-email-server</id><content type="html" xml:base="https://kuros.in/testing/testing-email-using-mock-email-server/">&lt;p&gt;I checked in my changes, time to wait for the build to be completed in jenkins. It was time to pick up coffee and play the waiting game, as it would take another hour before I can proceed with deployment of the code. We obviously had to do something !!&lt;/p&gt;

&lt;h2 id=&quot;mapping-the-wastage&quot;&gt;Mapping the wastage&lt;/h2&gt;
&lt;p&gt;This micro service was responsible for sending/receiving mails from different configured mail servers. We were doing unit and integration level testing, where in integration testing we were connecting to a local exchange server with pre-configured test users for sending/receiving mail.&lt;/p&gt;

&lt;p&gt;The best way to start optimization - find gaps &amp;amp; wastage. We broke down the total build execution into build, deployment on staging environment &amp;amp; acceptance.&lt;/p&gt;

&lt;p&gt;We noticed the build &amp;amp; deployment time was fair, however the acceptance tests were taking around 40-45 min to complete. Now that we have narrowed our focus. It was time to do a breakdown analysis of test.&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;We often have been observing slowness of builds, sometimes intermittent failures as well. The reason were obvious, tests were using same set of users, so during parallel execution data gets corrupted. We needed a clean way test our api’s. Also after regular intervals, we had to clean the mail accounts.&lt;/p&gt;

&lt;p&gt;To put simply we needed&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unique set of user for each test.&lt;/li&gt;
  &lt;li&gt;Local server to reduce network delays.&lt;/li&gt;
  &lt;li&gt;Ability to automatically flush the existing data.&lt;/li&gt;
  &lt;li&gt;Behave like a real world mail server&lt;/li&gt;
  &lt;li&gt;Supports the standards protocols - SMTP, IMAP &amp;amp; POP3&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;greenmail-to-rescue&quot;&gt;GreenMail to rescue&lt;/h2&gt;
&lt;p&gt;Time for us to switch to mock email server, there are good number of servers available. Some are free to use and some are paid.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://mailtrap.io/&quot;&gt;MailTrap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mailspons.com/&quot;&gt;Mailspons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://greenmail-mail-test.github.io/greenmail/&quot;&gt;GreenMail&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GreenMail is open source while other solutions are paid. As stated on the main page, the benefits include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Supports SMTP, POP3 and IMAP including SSL&lt;/li&gt;
  &lt;li&gt;Prevents accidental email leaking to real mail servers&lt;/li&gt;
  &lt;li&gt;Provides different deployment models, such as a simple standalone JVM process, as a WAR module or as a docker image&lt;/li&gt;
  &lt;li&gt;Easily embeddable in JUnit tests for integration testing&lt;/li&gt;
  &lt;li&gt;Lightweight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This library supports both receiving and retrieving mails from java.&lt;/p&gt;

&lt;h2 id=&quot;java-mail-service&quot;&gt;Java Mail Service&lt;/h2&gt;

&lt;p&gt;We will create a simple method to mimic a real world functionality - to send a mail.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/a1ba804dec4ee1bb0511a21e8c38b726.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So now we need to test this functionality, as its clear we will need a email server to validate if our code is working fine.&lt;/p&gt;

&lt;h2 id=&quot;set-up-greenmail&quot;&gt;Set up GreenMail&lt;/h2&gt;

&lt;p&gt;We will embed a mock server in our test, first we will add a test dependency for &lt;strong&gt;greenmail&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/226126b48c25e868610f7d11f90b0805.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Next, we are going to write a simple test to send message and validate. In this example, we will start our mock server at 9000 port and connect to it via our api, and send the message.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kuros/8b2b40a0bce62854c22adb787e53c507.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;With every test I can create unique set of users, and run my test against it and finally purge the server.&lt;/p&gt;

&lt;p&gt;GreenMail also gives utility to access the received messages. You can also use the standard way by connecting via IMAP/POP3 implementations.&lt;/p&gt;

&lt;p&gt;Its a great way to avoid message spill over, cleanup managed exchange server and improves reliability.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kuros/blog-code/tree/master/testing/greenmail&quot;&gt;Complete code&lt;/a&gt;&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="testing" /><summary type="html">I checked in my changes, time to wait for the build to be completed in jenkins. It was time to pick up coffee and play the waiting game, as it would take another hour before I can proceed with deployment of the code. We obviously had to do something !!</summary></entry><entry><title type="html">Kafka Messaging with Spring Boot</title><link href="https://kuros.in/messaging/publish-and-consume-kafka-message-in-spring-boot-applicaton/" rel="alternate" type="text/html" title="Kafka Messaging with Spring Boot" /><published>2020-05-02T00:00:00+00:00</published><updated>2020-05-02T00:00:00+00:00</updated><id>https://kuros.in/messaging/publish-and-consume-kafka-message-in-spring-boot-applicaton</id><content type="html" xml:base="https://kuros.in/messaging/publish-and-consume-kafka-message-in-spring-boot-applicaton/">&lt;p&gt;In my previous article we looked at &lt;a href=&quot;/messaging/getting-started-with-kafka-install-and-messaging/&quot;&gt;setting up Kafka&lt;/a&gt; on our local machine. Now we will write a spring boot application and integrate Kafka messaging.&lt;/p&gt;

&lt;p&gt;Let’s start with a simple spring boot application. Below is the pom file for this application.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.4.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;in.kuros.blog-code&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;messaging-kafka&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;messaging-kafka&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.junit.vintage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit-vintage-engine&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To enable Kafka we will just add dependency for it. It would download the compatible version for kafka, out of the box.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.kafka&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-kafka&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;We are going to initialize our application with kafka spring configuration for both producer &amp;amp; consumer.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;bootstrap-servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:9092&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;auto-offset-reset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;earliest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;key-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;group-id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myApp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;bootstrap-servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:9092&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;key-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringSerializer&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringSerializer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So we are initializing consumer properties with:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;spring.kafka.consumer.bootstrap-servers: To let our application know how to connect to kafka server.&lt;/li&gt;
  &lt;li&gt;spring.kafka.consumer.auto-offset-reset: This ensures the new consumer group gets the messages we sent, because the container might start after the sends have completed (not applicable explicitly in our case, since both producer and consumer reside in the same application).&lt;/li&gt;
  &lt;li&gt;spring.kafka.consumer.key-deserializer: Kafka provides a number of ways to deserialize, and we are using the StringDeserializer.&lt;/li&gt;
  &lt;li&gt;spring.kafka.consumer.value-deserializer: Similarly, for value also we will use StringDeserializer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the same way, we have provided bootstrap-servers, key-serializer &amp;amp; value-serializer for producer.&lt;/p&gt;

&lt;h1 id=&quot;producer&quot;&gt;Producer&lt;/h1&gt;
&lt;p&gt;Spring boot provides a wrapper over KafkaProducer and simplifies the usage. All we need to do is to inject &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KafkaTemplate&lt;/code&gt; and we are ready to publish message.
Below is a very simple producer.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;in.kuros.blogcode.messaging.kafka.producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.RequiredArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.KafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageProducer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publishMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;consumer&quot;&gt;Consumer&lt;/h1&gt;
&lt;p&gt;We are going to create a consumer which will accept the message and will print it in the console.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;in.kuros.blogcode.messaging.kafka.consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.annotation.KafkaListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageConsumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@KafkaListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Received: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have annotated our method with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KafkaListener&lt;/code&gt;. It does all the heavy lifting of connecting to topic, parsing the message and giving it to you.
That’s it.&lt;/p&gt;

&lt;p&gt;To test our application, we will create a controller to send the message.&lt;/p&gt;

&lt;h1 id=&quot;controller&quot;&gt;Controller&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;in.kuros.blogcode.messaging.kafka.controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;in.kuros.blogcode.messaging.kafka.producer.MessageProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.RequiredArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/kafka&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageProducer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/publish&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMessageToKafkaTopic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;messageProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;publishMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We have created a controller which takes in message and publishes it to Kafka topic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Time to start our application, just execute the below command run spring boot application from the terminal.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the application starts, we will make a curl request to our endpoint to publish the message.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'message=test'&lt;/span&gt; http://localhost:8080/kafka/publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We got an error which would be something like this:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Caused by: java.lang.IllegalStateException: Topic(s) [user-name] is/are not present and missingTopicsFatal is true
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.checkTopics(AbstractMessageListenerContainer.java:383) ~[spring-kafka-2.3.5.RELEASE.jar:2.3.5.RELEASE]
	at org.springframework.kafka.listener.ConcurrentMessageListenerContainer.doStart(ConcurrentMessageListenerContainer.java:136) ~[spring-kafka-2.3.5.RELEASE.jar:2.3.5.RELEASE]
	at org.springframework.kafka.listener.AbstractMessageListenerContainer.start(AbstractMessageListenerContainer.java:340) ~[spring-kafka-2.3.5.RELEASE.jar:2.3.5.RELEASE]
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.startIfNecessary(KafkaListenerEndpointRegistry.java:312) ~[spring-kafka-2.3.5.RELEASE.jar:2.3.5.RELEASE]
	at org.springframework.kafka.config.KafkaListenerEndpointRegistry.start(KafkaListenerEndpointRegistry.java:257) ~[spring-kafka-2.3.5.RELEASE.jar:2.3.5.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182) ~[spring-context-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	... 14 common frames omitted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We forgot to create a topic on kafka server. Todo that we will execute below command in kafka’s bin folder.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class=&quot;nt&quot;&gt;--replication-factor&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; user-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s try again, and now we can successfully receive the message sent via Kafka, it would be something like this:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2020-05-03 02:13:23.524  INFO 5256 --- [nio-8080-exec-1] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 2.3.1
2020-05-03 02:13:23.524  INFO 5256 --- [nio-8080-exec-1] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: 18a913733fb71c01
2020-05-03 02:13:23.524  INFO 5256 --- [nio-8080-exec-1] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1588452203524
2020-05-03 02:13:23.529  INFO 5256 --- [ad | producer-1] org.apache.kafka.clients.Metadata        : [Producer clientId=producer-1] Cluster ID: y9U_vx0HRk6xe-fcDTKlmg
Received: test

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find the complete code at &lt;a href=&quot;https://github.com/kuros/blog-code/tree/master/messaging/messaging-kafka&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;</content><author><name>Kumar Rohit</name></author><category term="messaging" /><summary type="html">In my previous article we looked at setting up Kafka on our local machine. Now we will write a spring boot application and integrate Kafka messaging.</summary></entry></feed>